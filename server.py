import cv2
import mss
import numpy as np
import scipy.spatial
import socket
import socketserver
from threading import Thread
import time
import json

HEIGHT = 336
WIDTH = 240

palette = np.array([[0, 0, 0], [15, 15, 15], [27, 27, 27], [39, 39, 39], [51, 51, 51], [65, 65, 65], [79, 79, 79], [94, 94, 94], [104, 104, 104], [120, 120, 120], [137, 137, 137], [154, 154, 154], [171, 171, 171], [191, 191, 191], [211, 211, 211], [234, 234, 234], [0, 22, 0], [15, 33, 0], [26, 45, 0], [39, 57, 0], [51, 69, 0], [64, 83, 0], [79, 97, 0], [93, 112, 0], [104, 122, 0], [119, 138, 23], [137, 155, 41], [154, 172, 59], [171, 189, 76], [190, 209, 96], [210, 229, 116], [233, 252, 139], [28, 0, 0], [39, 19, 0], [51, 31, 0], [63, 43, 0], [75, 55, 0], [89, 69, 0], [103, 83, 0], [117, 97, 0], [128, 108, 18], [143, 124, 34], [161, 141, 52], [178, 158, 69], [195, 175, 86], [214, 195, 106], [234, 215, 126], [255, 238, 150], [47, 0, 0], [58, 0, 0], [70, 15, 0], [82, 28, 0], [94, 40, 0], [108, 54, 0], [122, 68, 22], [136, 82, 36], [146, 93, 47], [162, 109, 63], [179, 126, 80], [196, 143, 98], [214, 160, 115], [233, 180, 135], [253, 200, 155], [255, 223, 178], [57, 0, 0], [68, 0, 0], [80, 0, 10], [92, 15, 23], [104, 27, 35], [117, 41, 49], [132, 55, 63], [146, 70, 78], [156, 80, 88], [172, 96, 104], [189, 113, 121], [206, 131, 138], [223, 148, 156], [242, 167, 175], [255, 187, 195], [255, 210, 218], [55, 0, 32], [67, 0, 44], [78, 0, 55], [90, 0, 68], [102, 19, 80], [116, 33, 93], [130, 48, 108], [144, 62, 122], [155, 73, 132], [170, 89, 148], [188, 106, 165], [205, 123, 182], [222, 140, 199], [241, 160, 219], [255, 180, 239], [255, 203, 255], [43, 0, 71], [54, 0, 82], [66, 0, 94], [78, 0, 106], [90, 18, 118], [103, 32, 131], [118, 47, 146], [132, 61, 160], [142, 72, 170], [158, 88, 186], [175, 105, 203], [192, 122, 220], [209, 140, 237], [229, 159, 255], [249, 179, 255], [255, 202, 255], [22, 0, 95], [33, 0, 106], [45, 0, 118], [57, 12, 130], [69, 25, 141], [83, 39, 155], [97, 53, 169], [111, 68, 183], [122, 78, 194], [138, 94, 209], [155, 111, 226], [172, 129, 243], [189, 146, 255], [208, 165, 255], [228, 185, 255], [251, 208, 255], [0, 0, 99], [0, 0, 111], [20, 12, 122], [32, 24, 134], [44, 37, 146], [58, 50, 159], [72, 65, 174], [87, 79, 188], [97, 90, 198], [113, 106, 214], [130, 123, 231], [148, 140, 248], [165, 157, 255], [184, 177, 255], [204, 197, 255], [227, 220, 255], [0, 0, 84], [0, 15, 95], [0, 27, 106], [0, 39, 118], [21, 51, 130], [35, 65, 144], [49, 80, 158], [64, 94, 172], [74, 104, 182], [90, 120, 198], [107, 137, 215], [125, 155, 232], [142, 172, 249], [161, 191, 255], [181, 211, 255], [204, 234, 255], [0, 19, 50], [0, 30, 62], [0, 42, 73], [0, 54, 85], [0, 66, 97], [18, 80, 111], [32, 94, 125], [47, 109, 139], [57, 119, 150], [73, 135, 166], [91, 152, 183], [108, 169, 200], [125, 186, 217], [145, 206, 236], [165, 226, 255], [188, 249, 255], [0, 31, 0], [0, 42, 18], [0, 53, 30], [0, 66, 42], [0, 78, 54], [11, 91, 68], [25, 106, 83], [40, 120, 97], [51, 130, 107], [67, 146, 123], [84, 163, 140], [101, 180, 158], [119, 198, 175], [138, 217, 194], [158, 237, 214], [181, 255, 237], [0, 36, 0], [0, 48, 0], [0, 59, 0], [0, 71, 0], [0, 83, 10], [16, 97, 24], [30, 111, 39], [45, 126, 53], [55, 136, 64], [71, 152, 80], [89, 169, 97], [106, 186, 114], [123, 203, 132], [143, 222, 151], [163, 242, 171], [186, 255, 194], [0, 35, 0], [0, 47, 0], [0, 58, 0], [0, 70, 0], [17, 82, 0], [31, 96, 0], [46, 110, 0], [60, 124, 18], [71, 135, 28], [87, 151, 45], [104, 168, 62], [121, 185, 79], [138, 202, 97], [158, 221, 116], [178, 241, 137], [201, 255, 160], [0, 27, 0], [0, 39, 0], [15, 50, 0], [28, 62, 0], [40, 74, 0], [54, 88, 0], [68, 102, 0], [82, 117, 0], [93, 127, 0], [109, 143, 25], [126, 160, 43], [143, 177, 61], [160, 194, 78], [180, 214, 98], [200, 234, 118], [223, 255, 141], [17, 14, 0], [29, 26, 0], [41, 37, 0], [53, 49, 0], [65, 61, 0], [79, 75, 0], [93, 90, 0], [107, 104, 0], [118, 114, 11], [133, 130, 27], [151, 147, 45], [168, 164, 62], [185, 182, 80], [204, 201, 99], [224, 221, 119], [247, 244, 143]], dtype=np.uint8)
tree = scipy.spatial.KDTree(palette)

class App:
    def __init__(self):
        self.sct = mss.mss()
        self.monitor = self.sct.monitors[0]
        self.shaped = np.zeros((self.monitor['height'], self.monitor['width']))
        self.config = json.load(open('config.json'))
        self.server = Server()
        Thread(target=self.capture).start()

    def capture(self):
        while True:
            screenshot = self.sct.grab(self.monitor)
            original = np.frombuffer(screenshot.rgb, dtype=np.uint8)
            self.shaped = np.reshape(original, (screenshot.height, screenshot.width, 3))
            time.sleep(1/25)

    def get_screen(self, idx):
        config = self.config['TVs'][idx]
        cropped = self.shaped[config['y']:config['y']+config['height'], config['x']:config['x']+config['width'],:]
        scaled = cv2.resize(cropped, (HEIGHT, WIDTH))
        linear = np.reshape(scaled, ((HEIGHT * WIDTH, 3)))
        mapped = tree.query(linear)[1].astype(np.uint8)
        # mapped = mapped.reshape((240, 336))
        return mapped


class ESPHandler(socketserver.BaseRequestHandler):
    def handle(self):
        global app
        self.data = self.request.recv(1024).strip()
        screen = app.get_screen(int(self.data))
        print(f'sending {len(screen.tobytes())}')
        self.request.sendall(screen.tobytes())

class Server:
    def __init__(self):
        self.server = socketserver.ThreadingTCPServer(('0.0.0.0', 12345), ESPHandler)
        Thread(target=self.server.serve_forever).start()

app = App()