use core::time;
use std::{net::UdpSocket, time::SystemTime};
use screenshots::{Screen};
use std::thread;
use std::time::Duration;
use kiddo::float::{kdtree::KdTree, distance::squared_euclidean};
use opencv::{self as cv};
fn main() -> std::io::Result<()> {
    {
        let items: Vec<[f32; 3]> = vec![[0.0, 0.0, 0.0], [15.0, 15.0, 15.0], [27.0, 27.0, 27.0], [39.0, 39.0, 39.0], [51.0, 51.0, 51.0], [65.0, 65.0, 65.0], [79.0, 79.0, 79.0], [94.0, 94.0, 94.0], [104.0, 104.0, 104.0], [120.0, 120.0, 120.0], [137.0, 137.0, 137.0], [154.0, 154.0, 154.0], [171.0, 171.0, 171.0], [191.0, 191.0, 191.0], [211.0, 211.0, 211.0], [234.0, 234.0, 234.0], [0.0, 22.0, 0.0], [15.0, 33.0, 0.0], [26.0, 45.0, 0.0], [39.0, 57.0, 0.0], [51.0, 69.0, 0.0], [64.0, 83.0, 0.0], [79.0, 97.0, 0.0], [93.0, 112.0, 0.0], [104.0, 122.0, 0.0], [119.0, 138.0, 23.0], [137.0, 155.0, 41.0], [154.0, 172.0, 59.0], [171.0, 189.0, 76.0], [190.0, 209.0, 96.0], [210.0, 229.0, 116.0], [233.0, 252.0, 139.0], [28.0, 0.0, 0.0], [39.0, 19.0, 0.0], [51.0, 31.0, 0.0], [63.0, 43.0, 0.0], [75.0, 55.0, 0.0], [89.0, 69.0, 0.0], [103.0, 83.0, 0.0], [117.0, 97.0, 0.0], [128.0, 108.0, 18.0], [143.0, 124.0, 34.0], [161.0, 141.0, 52.0], [178.0, 158.0, 69.0], [195.0, 175.0, 86.0], [214.0, 195.0, 106.0], [234.0, 215.0, 126.0], [255.0, 238.0, 150.0], [47.0, 0.0, 0.0], [58.0, 0.0, 0.0], [70.0, 15.0, 0.0], [82.0, 28.0, 0.0], [94.0, 40.0, 0.0], [108.0, 54.0, 0.0], [122.0, 68.0, 22.0], [136.0, 82.0, 36.0], [146.0, 93.0, 47.0], [162.0, 109.0, 63.0], [179.0, 126.0, 80.0], [196.0, 143.0, 98.0], [214.0, 160.0, 115.0], [233.0, 180.0, 135.0], [253.0, 200.0, 155.0], [255.0, 223.0, 178.0], [57.0, 0.0, 0.0], [68.0, 0.0, 0.0], [80.0, 0.0, 10.0], [92.0, 15.0, 23.0], [104.0, 27.0, 35.0], [117.0, 41.0, 49.0], [132.0, 55.0, 63.0], [146.0, 70.0, 78.0], [156.0, 80.0, 88.0], [172.0, 96.0, 104.0], [189.0, 113.0, 121.0], [206.0, 131.0, 138.0], [223.0, 148.0, 156.0], [242.0, 167.0, 175.0], [255.0, 187.0, 195.0], [255.0, 210.0, 218.0], [55.0, 0.0, 32.0], [67.0, 0.0, 44.0], [78.0, 0.0, 55.0], [90.0, 0.0, 68.0], [102.0, 19.0, 80.0], [116.0, 33.0, 93.0], [130.0, 48.0, 108.0], [144.0, 62.0, 122.0], [155.0, 73.0, 132.0], [170.0, 89.0, 148.0], [188.0, 106.0, 165.0], [205.0, 123.0, 182.0], [222.0, 140.0, 199.0], [241.0, 160.0, 219.0], [255.0, 180.0, 239.0], [255.0, 203.0, 255.0], [43.0, 0.0, 71.0], [54.0, 0.0, 82.0], [66.0, 0.0, 94.0], [78.0, 0.0, 106.0], [90.0, 18.0, 118.0], [103.0, 32.0, 131.0], [118.0, 47.0, 146.0], [132.0, 61.0, 160.0], [142.0, 72.0, 170.0], [158.0, 88.0, 186.0], [175.0, 105.0, 203.0], [192.0, 122.0, 220.0], [209.0, 140.0, 237.0], [229.0, 159.0, 255.0], [249.0, 179.0, 255.0], [255.0, 202.0, 255.0], [22.0, 0.0, 95.0], [33.0, 0.0, 106.0], [45.0, 0.0, 118.0], [57.0, 12.0, 130.0], [69.0, 25.0, 141.0], [83.0, 39.0, 155.0], [97.0, 53.0, 169.0], [111.0, 68.0, 183.0], [122.0, 78.0, 194.0], [138.0, 94.0, 209.0], [155.0, 111.0, 226.0], [172.0, 129.0, 243.0], [189.0, 146.0, 255.0], [208.0, 165.0, 255.0], [228.0, 185.0, 255.0], [251.0, 208.0, 255.0], [0.0, 0.0, 99.0], [0.0, 0.0, 111.0], [20.0, 12.0, 122.0], [32.0, 24.0, 134.0], [44.0, 37.0, 146.0], [58.0, 50.0, 159.0], [72.0, 65.0, 174.0], [87.0, 79.0, 188.0], [97.0, 90.0, 198.0], [113.0, 106.0, 214.0], [130.0, 123.0, 231.0], [148.0, 140.0, 248.0], [165.0, 157.0, 255.0], [184.0, 177.0, 255.0], [204.0, 197.0, 255.0], [227.0, 220.0, 255.0], [0.0, 0.0, 84.0], [0.0, 15.0, 95.0], [0.0, 27.0, 106.0], [0.0, 39.0, 118.0], [21.0, 51.0, 130.0], [35.0, 65.0, 144.0], [49.0, 80.0, 158.0], [64.0, 94.0, 172.0], [74.0, 104.0, 182.0], [90.0, 120.0, 198.0], [107.0, 137.0, 215.0], [125.0, 155.0, 232.0], [142.0, 172.0, 249.0], [161.0, 191.0, 255.0], [181.0, 211.0, 255.0], [204.0, 234.0, 255.0], [0.0, 19.0, 50.0], [0.0, 30.0, 62.0], [0.0, 42.0, 73.0], [0.0, 54.0, 85.0], [0.0, 66.0, 97.0], [18.0, 80.0, 111.0], [32.0, 94.0, 125.0], [47.0, 109.0, 139.0], [57.0, 119.0, 150.0], [73.0, 135.0, 166.0], [91.0, 152.0, 183.0], [108.0, 169.0, 200.0], [125.0, 186.0, 217.0], [145.0, 206.0, 236.0], [165.0, 226.0, 255.0], [188.0, 249.0, 255.0], [0.0, 31.0, 0.0], [0.0, 42.0, 18.0], [0.0, 53.0, 30.0], [0.0, 66.0, 42.0], [0.0, 78.0, 54.0], [11.0, 91.0, 68.0], [25.0, 106.0, 83.0], [40.0, 120.0, 97.0], [51.0, 130.0, 107.0], [67.0, 146.0, 123.0], [84.0, 163.0, 140.0], [101.0, 180.0, 158.0], [119.0, 198.0, 175.0], [138.0, 217.0, 194.0], [158.0, 237.0, 214.0], [181.0, 255.0, 237.0], [0.0, 36.0, 0.0], [0.0, 48.0, 0.0], [0.0, 59.0, 0.0], [0.0, 71.0, 0.0], [0.0, 83.0, 10.0], [16.0, 97.0, 24.0], [30.0, 111.0, 39.0], [45.0, 126.0, 53.0], [55.0, 136.0, 64.0], [71.0, 152.0, 80.0], [89.0, 169.0, 97.0], [106.0, 186.0, 114.0], [123.0, 203.0, 132.0], [143.0, 222.0, 151.0], [163.0, 242.0, 171.0], [186.0, 255.0, 194.0], [0.0, 35.0, 0.0], [0.0, 47.0, 0.0], [0.0, 58.0, 0.0], [0.0, 70.0, 0.0], [17.0, 82.0, 0.0], [31.0, 96.0, 0.0], [46.0, 110.0, 0.0], [60.0, 124.0, 18.0], [71.0, 135.0, 28.0], [87.0, 151.0, 45.0], [104.0, 168.0, 62.0], [121.0, 185.0, 79.0], [138.0, 202.0, 97.0], [158.0, 221.0, 116.0], [178.0, 241.0, 137.0], [201.0, 255.0, 160.0], [0.0, 27.0, 0.0], [0.0, 39.0, 0.0], [15.0, 50.0, 0.0], [28.0, 62.0, 0.0], [40.0, 74.0, 0.0], [54.0, 88.0, 0.0], [68.0, 102.0, 0.0], [82.0, 117.0, 0.0], [93.0, 127.0, 0.0], [109.0, 143.0, 25.0], [126.0, 160.0, 43.0], [143.0, 177.0, 61.0], [160.0, 194.0, 78.0], [180.0, 214.0, 98.0], [200.0, 234.0, 118.0], [223.0, 255.0, 141.0], [17.0, 14.0, 0.0], [29.0, 26.0, 0.0], [41.0, 37.0, 0.0], [53.0, 49.0, 0.0], [65.0, 61.0, 0.0], [79.0, 75.0, 0.0], [93.0, 90.0, 0.0], [107.0, 104.0, 0.0], [118.0, 114.0, 11.0], [133.0, 130.0, 27.0], [151.0, 147.0, 45.0], [168.0, 164.0, 62.0], [185.0, 182.0, 80.0], [204.0, 201.0, 99.0], [224.0, 221.0, 119.0], [247.0, 244.0, 143.0]];

        let mut kdtree: KdTree<f32, u8, 3, 32, u16> = (&items).into();
        
        let socket = UdpSocket::bind("0.0.0.0:0").expect("Could not bind to socket");
        let screens = Screen::all().unwrap();
        let main_screen = &screens[0];
        
        // let mut t: Mat = Mat::default();
        // cv::imgproc::cvt_color(&cvimg, &mut t, cv::imgproc::COLOR_RGBA2BGRA, 0).unwrap();
        // cvimg = t;
        
        let inside_dur = Duration::from_micros(650);
        loop {
            let img: Vec<u8> = main_screen.capture().unwrap().into();
            let mut cvimg = Mat::from_slice(&img).unwrap();
            cvimg = cvimg.reshape(4, (main_screen.display_info.height*2) as i32).unwrap();


            let mut resized: Mat = Mat::default();
            cv::imgproc::resize(&cvimg, &mut resized, cv::core::Size::new(336, 240), 0.0, 0.0, cv::imgproc::INTER_LINEAR).unwrap();

            let mut out: Vec<u8> = Vec::new();

            for pixel in resized.iter::<cv::core::VecN<u8, 4>>().unwrap() {
                out.push(*kdtree.nearest(&[pixel.1[0] as f32, pixel.1[1] as f32, pixel.1[2] as f32]).unwrap().item as u8);
            }
            
            let mut outcv = Mat::from_slice(&out).unwrap();
            outcv = outcv.reshape(1, 240).unwrap();

            for i in 0u8..240  {
                let t  = outcv.row(i as i32).unwrap();
                let data: &[u8] = &[&[i], t.data_bytes().unwrap()].concat();

                // println!("{:?}", data);
                match socket.send_to(&data, "192.168.4.1:1234") {
                    Ok(_) => (),
                    Err(e) => println!("Error: {}", e),
                }
                thread::sleep(inside_dur);
            }
            let dur = Duration::from_secs(1);
            // thread::sleep(dur);
            match socket.send_to(&[], "192.168.4.1:1234") {
                Ok(_) => (),
                Err(e) => println!("Error: {}", e),
            }
        }
    }
    Ok(())
}
